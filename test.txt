from cryptography.fernet import Fernet

def generate_key():
    """
    Generate a random encryption key and save it to a file.
    """
    key = Fernet.generate_key()
    with open('encryption_key.txt', 'wb') as key_file:
        key_file.write(key)

def encrypt(uid, password):
    """
    Encrypt the UID and password using the encryption key.
    Save the encrypted values to separate files.
    """
    with open('encryption_key.txt', 'rb') as key_file:
        key = key_file.read()
    
    cipher_suite = Fernet(key)
    encrypted_uid = cipher_suite.encrypt(uid.encode())
    encrypted_password = cipher_suite.encrypt(password.encode())
    
    with open('encrypted_uid.txt', 'wb') as uid_file:
        uid_file.write(encrypted_uid)
    
    with open('encrypted_password.txt', 'wb') as password_file:
        password_file.write(encrypted_password)

def decrypt():
    """
    Decrypt the UID and password using the encryption key.
    Return the original values.
    """
    with open('encryption_key.txt', 'rb') as key_file:
        key = key_file.read()
    
    cipher_suite = Fernet(key)
    
    with open('encrypted_uid.txt', 'rb') as uid_file:
        encrypted_uid = uid_file.read()
    
    with open('encrypted_password.txt', 'rb') as password_file:
        encrypted_password = password_file.read()
    
    decrypted_uid = cipher_suite.decrypt(encrypted_uid).decode()
    decrypted_password = cipher_suite.decrypt(encrypted_password).decode()
    
    return decrypted_uid, decrypted_password

# Generate a new encryption key (run only once)
generate_key()

# Encrypt UID and password
uid = input("Enter your UID: ")
password = input("Enter your password: ")
encrypt(uid, password)

# Decrypt UID and password
decrypted_uid, decrypted_password = decrypt()
print("Decrypted UID:", decrypted_uid)
print("Decrypted password:", decrypted_password)
